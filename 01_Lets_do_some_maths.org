#+Author: Small changes by [[http:/cv.adam.kurkiewicz.pl][Adam Kurkiewicz]]. Based on work of, but not endorsed by, [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]], [[http://leodemoura.github.io][Leonardo de Moura]], [[http://www.cs.cmu.edu/~soonhok][Soonho Kong]].

* Let's do some maths

A correct mathematical proof of X is a rock solid evidence that X is true. But can you trust the correctness of the proof?!

A recent programming language from Microsoft Research called [[http://leanprover.github.io/][Lean]] allows you to break down the proof into small pieces -- all the way down into the most basic truths -- and test each piece rigorously by putting it through its trusted kernel.

One way to prove a theorem is by explicitly constructing what is known as a "proof term". You can read more about these in the official [[https://leanprover.github.io/introduction_to_lean/][lean tutorial]].

Let's prove that 2 + 2 = 2 * 2. 

#+BEGIN_SRC lean
-- BEGIN
-- Method 1, contructing the proof term directly.
lemma add2_term (a : nat) : a + a = 2 * a :=
    have S1 : (a + a) = 1 * (a + a), from eq.symm (one_mul (a + a)),
    have S2 : 1 * (a + a) = (1 * a + 1 * a), from mul_add 1 a a,
    have S3 : 1 * a + 1 * a = (1 + 1) * a, from eq.symm (add_mul 1 1 a),
    have S4 : (1 + 1) * a = 2 * a, from eq.refl _,
    eq.trans (eq.trans (eq.trans S1 S2) S3) S4

example : 2 + 2 = 2 * 2 := add2_term 2
-- END
#+END_SRC

BTW, lean compiles to asm.js, so you can run the proof above directly in your browser! If you see the word "Done" in the right bottom pane, then your proof compiles, and it is correct.

Constructing the proof term explictly can be a little verbose and repetitive. Lean offers handy sugar -- the calc environment!

#+BEGIN_SRC lean
-- BEGIN
-- Method 2, constructing the proof term through calc environment.
lemma add2_calc (a : nat) : a + a = 2 * a := 
    calc (a + a) = 1 * (a + a) : eq.symm (one_mul (a + a))
             ... = (1 * a + 1 * a) : mul_add 1 a a
             ... = (1 + 1) * a : eq.symm (add_mul 1 1 a)
             ... = 2 * a : eq.refl _

example : 2 + 2 = 2 * 2 := add2_calc 2
-- END
#+END_SRC

If you're a bit lazy, and can't be asked to figure out all necessary transformations in painful detail, you can use the rewrite tactic:

#+BEGIN_SRC lean
-- BEGIN
-- Method 3, constructing the proof term using tactics.
lemma add2_tact (a : nat) : a + a = 2 * a :=
    calc (a + a) = 1 * (a + a) : by rw one_mul (a + a)
             ... = (1 * a + 1 * a) : by rw mul_add
             ... = (1 + 1) * a : by rw add_mul
             ... = 2 * a : rfl

example : 2 + 2 = 2 * 2 := add2_tact 2
-- END
#+END_SRC

Which can be written more compactly:

#+BEGIN_SRC lean
-- BEGIN
-- Method 4, tactics again, but a bit more compact.
lemma add2_tact2 (a : nat) : a + a = 2 * a :=
    calc (a + a) = 1 * (a + a) : by rw one_mul (a + a)
             ... = (1 + 1) * a : by rw [mul_add, add_mul]

example : 2 + 2 = 2 * 2 := add2_tact2 2
-- END
#+END_SRC

Another approach, and even shorter, would be to use the simplifier tactic:

#+BEGIN_SRC lean
-- BEGIN
-- Method 5, slightly shorter, using simplifier.
lemma add2_simp (a : nat) : a + a = 2 * a :=
    calc (a + a) = 1 * (a + a) : by rw one_mul (a + a)
             ... = (1 + 1) * a : by simp [mul_add]

example : 2 + 2 = 2 * 2 := add2_simp 2
-- END
#+END_SRC

You can also get away without a lemma altogether. Lean's type checker is clever enough to work things out from one [[https://en.wikipedia.org/wiki/Reflexive_relation][simple hint]]

#+BEGIN_SRC lean
-- BEGIN
-- Method 6, letting the type system figure it out...
example : 2 + 2 = 2 * 2 := rfl
-- END
#+END_SRC

* Want more?

If you're interested in mathematical proofs, and how to write them in Lean Prof. Jeremy Avigad has an excellent course in mathematical logic: [[https://avigad.github.io/logic_and_proof/][Logic and proof]].

If you know some maths already, and you want to just dive in into formal proof checking, you can check out [[https://leanprover.github.io/introduction_to_lean/][the lean tutorial]].

